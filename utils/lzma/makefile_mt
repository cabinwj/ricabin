CC	= gcc
CXX	= g++
AR	= ar

ARFLAGS = cr
CPPFLAGS= -g -D__MULTI_THREAD__ -Wall $(INC) -fPIC

TARGET	= $(DEBUG_TARGET)

DEBUG_TARGET = $(DEBUG_TARGET_DIR)/liblzma_mt.a
RELEASE_TARGET = $(RELEASE_TARGET_DIR)/liblzma_mt.a

BASE_DIR= ${HOME}
SERVER_DIR= $(BASE_DIR)/utils
LZMA_DIR= $(SERVER_DIR)/lzma
INCLUDE_DIR= $(LZMA_DIR)/inc
SOURCE_DIR= $(LZMA_DIR)/src
OBJ_DIR= $(LZMA_DIR)/.objs

DEBUG_TARGET_DIR= $(SERVER_DIR)/lib/debug
RELEASE_TARGET_DIR= $(SERVER_DIR)/lib/release

INC= -I$(INCLUDE_DIR)
VPATH= .:$(SERVER_DIR)
SRC= $(wildcard $(SOURCE_DIR)/*.cpp)
OBJS= $(patsubst %.cpp,$(OBJ_DIR)/%.o,$(notdir $(SRC)))

all : $(TARGET)

$(TARGET) : $(OBJS)
	@if [ ! -e $(DEBUG_TARGET_DIR) ]; then \
		mkdir -p $(DEBUG_TARGET_DIR); \
	fi
	@if [ ! -e $(RELEASE_TARGET_DIR) ]; then \
		mkdir -p $(RELEASE_TARGET_DIR); \
	fi
	$(AR) $(ARFLAGS) $@ $?

$(OBJ_DIR)/%.o : %.cpp
	@if [ ! -e $(OBJ_DIR) ]; then \
		mkdir $(OBJ_DIR); \
	fi
	$(CXX) $(CPPFLAGS) -c $< -o $@

clean: 
	rm -f $(OBJS) $(TARGET)